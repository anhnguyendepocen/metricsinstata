% Part 2: Exploring and cleaning data

## 1. Setup

We will continue working with the dataset from Part 1. This is data on participants of an employment training programme.

First, we set directories, load the data and take a look:

	cd "~/git_repos/metricsinstata/docs/part2"
	
	use "nsw.dta", clear

	des

***Note: We often write `, clear` after `use`. This tells Stata not to worry about losing any data currently loaded when loading the new data.***

## 2. Inspecting distributions

After taking a look at the variable names and number of observations, the first thing to do is to inspect the distribution of each variable. 

Why do we care about the distributions?

- We can check if there exist any outliers. It is common for there to be mistakes in data, for example someone with "fat fingers" pressing too many zeros when typing in earnings data. These types of data errors can strongly impact results and need to be removed before analysis

- The distributions can help guide model choice. For example, some models function better when variables are approximately normally distributed. We can inspect that here.

### 2.1 The tabulate and summarize commands

For discrete or categorical variables, this can be achieved using the `tabulate` command:

	tabulate treat

Here we can see that there are 297 individuals for whom variable `treat` equals 1 and 425 for whom variable `treat` equals 0.

Lets try doing the same with the `age` variable:

	tab age

Variable `age` takes on far more values than `treat`, so we will be better off using the `summarize` command:

	summarize age

Here we can see that the mean age of our individuals is 24.5, the standard deviation is 6.63, the minimum value is 17 and the maximum value is 55.

`summarize` is useful for continuous data. Lets apply it to variable `re75`, which represents earnings for a particular year.

	sum re75

You can add the option `, detail` to get more information on a variable's distribution:

	sum re75, detail

This gives a lot of detail on the quantiles of the distribution and higher order moments.

### 2.2. Histograms

You will often also plot data at this stage. The histogram is an extremeley quick and easy way to have a look at your data:

	histogram re75
	graph export "hist_re75.png", replace

![Histogram of earnings](hist_re75.png){width=70%}

The `graph export "hist_re75.png"` part of the code tells Stata to export the current graph. A ".png" image file will appear in your current working directory. The `, replace` option tells Stata to replace any existing file that is there.

We see from the histogram that the distribution is highly skewed, with a few very high earners. This is a common shape for an earnings distribution.

## 3. Conditions

Oftentimes we would like a command to only apply to a selection of observations, rather than to all observations in the dataset.

We can achieve this using the `if` command.

For example, the following code generates a histogram only for those with earnings under 5000:

	hist re75 if re75 < 5000
	graph export "hist_re75_lim.png", replace

![Histogram of earnings (earnings < 5000)](hist_re75_lim.png){width=70%}

We can also generate a histogram of earnings for those with `treat` equal to 1:

	hist re75 if treat == 1
	graph export "hist_re75_treat.png", replace

![Histogram of earnings among treated](hist_re75_treat.png){width=70%}

Note that for equality conditions, we need two equals signs.

We can also chain conditions as follows:

	sum re75 if treat == 1 & re75 < 5000

The gives features of the distribution of earnings for all individuals for whom earnings are under 5000 and treat equals 1.

The full set of conditions is:

![Conditional statements in Stata](conditionals.png){width=100%}

## 4. Keep and drop

Two very useful commands are `keep` and `drop`. Lets say we would like to keep only two variables, `re75` and `treat`. We can do this by typing:

```
keep re75 treat
```

All other variables will be deleted. They remain in the original file unless you save and replace the ".dta" file.

Now lets say we want to delete those two variables. You can do this by typing:

```
drop re75 treat
```

This also works for observations. Lets say you want to drop all observations with earnings equal to zero:


```
drop if re75 == 0
```

Be careful to keep track of what you have dropped. You may find something confusing further down the line which can be attributed to a poorly executed `keep` or `drop` command.

## 5. Saving data

Typically, a project will involve some data cleaning. This could involve:

- Naming and labeling variables

- Dropping variables we don't need

- Dropping observations which either we don't want or have a problem in one or more variables

- Transforming variables

- Generating new variables as functions of existing ones.

With that basic data cleaning complete, we typicall save a cleaned version. This allows us to perform analysis without having to go through all the previous steps again. Data-cleaning code can often take a very long time to run, so its useful to "check-in" your dataset after cleaning.

The command to do this is `save`:


```
save "lalonde_clean.dta", replace
```

## 6. Standard Stata syntax

You'll have recognized by now that Stata follows a fairly standard syntax across (most) commands. At its core, a Stata command is made up of a core command (e.g. `sum`) followed by one or more variable names (e.g. `re78`). There is usually then a comma, then a number of options (e.g. `det`). Here is that full command:

```
sum re78, det
```

If we include a condition, it usually follows the variable names and precedes the comma:


```
sum re78 if re78 < 5000, det
```

This structure doesn't hold for all commands, as we saw above for `keep` and `drop`. If unsure of how to use a command, remember you can type `help` then the name of the command to access Stata's help files, which are very useful. 

Even advanced Stata users regularly have to go back to Stata help files to understand how to use a command, so its worth getting used to the process.



